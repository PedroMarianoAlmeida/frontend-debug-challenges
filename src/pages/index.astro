---
import Layout from '@/layouts/Layout.astro';
import {type Challenge} from '@/components/project-use/Tables/ChallengeTable/columns'
import {type IChallengesGroupedByName, columns} from '@/components/project-use/Tables/HomePageTable/columns'
import { DataTable } from '@/components/project-use/Tables/data-table';

const chalanges = await Astro.glob('./challenges/**');

const chalangesData: Challenge[] = chalanges.map(({url}) => {
	const urlTyped = typeof url === 'string' ? url : ""
	const  [,,challengeName, type, stack] = urlTyped.split("/")
	const typeTyped = type === "problems" ? "problems" : "solutions"
	return {challengeName, type: typeTyped, stack, url: urlTyped}
})

const challengesGroupedByName: IChallengesGroupedByName[] = chalangesData.reduce((acc: IChallengesGroupedByName[], challengeData: Challenge) => {
  const { challengeName, type, stack , url } = challengeData;

  const challengeExistent = acc.find(challangeGrouped => challangeGrouped.name === challengeName)
  if(challengeExistent === undefined){
	acc.push({
		name: challengeName,
		problems: type === "problems" ? [{
			stack, url
		}] : [],
		solutions: type === "solutions" ? [{
			stack, url
		}] : []
	})
  }
  else{
	challengeExistent[type].push({
			stack, url
		})
  }
  return acc;
}, []);

// How should I handle with problems that uses more than one page? ðŸ¤”
---

<Layout title="Challenges - Frontend">
	<main>
		<h1 class="lg:leading-tighter text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl xl:text-[3.4rem] 2xl:text-[3.75rem] text-center mb-3">Frontend Challenges</h1>
		<p class="mx-auto max-w-[700px] text-gray-500 md:text-xl dark:text-gray-400 text-center mb-3">
			Learn and have fun with this craft design Frontend Challanges
		</p>
		<p class="mx-auto max-w-[700px] text-gray-500 dark:text-gray-400 text-center">
			By developer for developers
		</p>
		<div class="container mx-auto py-10">
			<DataTable columns={columns} data={challengesGroupedByName} />
		  </div>
	</main>
</Layout>
